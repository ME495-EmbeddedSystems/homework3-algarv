#!/usr/bin/env python

import sys
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from arm_move.srv import restart

def main():
    global robot
    global scene

    moveit_commander.roscpp_initialize(sys.argv)

    rospy.sleep(2)

    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)
    
    display_trajectory_publisher = rospy.Publisher("/move_group/display_planned_path", moveit_msgs.msg.DisplayTrajectory,queue_size=20)
    
    # We can get the name of the reference frame for this robot:
    planning_frame = move_group.get_planning_frame()
    print("============ Planning frame: %s" % planning_frame)

    # We can also print the name of the end-effector link for this group:
    eef_link = move_group.get_end_effector_link()
    print("============ End effector link: %s" % eef_link)

    # We can get a list of all the groups in the robot:
    group_names = robot.get_group_names()
    print("============ Available Planning Groups:", robot.get_group_names())

    # Sometimes for debugging it is useful to print the entire state of the
    # robot:
    print("============ Printing robot state")
    print(robot.get_current_state())
    print("")

    table_pose = geometry_msgs.msg.PoseStamped()
    table_pose.header.frame_id = "world"
    table_pose.pose.position.x = .25
    table_pose.pose.position.z = -.025
    table_pose.pose.orientation.w = 1.0
    scene.add_box("Table", table_pose, size=(1.22, .62, 0.05))

def reset(cleared):
    global robot
    global scene
    while not rospy.is_shutdown():
        if cleared.waypoints_cleared:
            box_pose = geometry_msgs.msg.PoseStamped()
            box_pose.header.frame_id = "world"
            # box_pose.pose.position.x = .25
            # box_pose.pose.position.z = .025
            # box_pose.pose.orientation.w = 1.0
            box_pose.pose.position.x = cleared.box_x
            box_pose.pose.position.y = cleared.box_y
            box_pose.pose.position.z = cleared.box_z 
            scene.add_box("RealSense_box", box_pose, size=(0.14, 0.09, 0.05))
            break
        else:
            continue


if __name__ == '__main__':
    rospy.init_node('mover') 
    main()
    rospy.service('reset',Empty,reset)
    global robot
    global scene
    robot = moveit_commander.RobotCommander()
    scene = moveit_commander.PlanningSceneInterface()
    rospy.spin()