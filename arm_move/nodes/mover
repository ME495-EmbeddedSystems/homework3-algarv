#!/usr/bin/env python

from re import T
import sys
from moveit_commander import move_group
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
# # from moveit_msgs import MoveItErrorCodes
from arm_move.srv import restart, step

def main():
    scene = moveit_commander.PlanningSceneInterface()

    moveit_commander.roscpp_initialize(sys.argv)

    rospy.sleep(2)
    
    # display_trajectory_publisher = rospy.Publisher("/move_group/display_planned_path", moveit_msgs.msg.DisplayTrajectory,queue_size=20)

    table_pose = geometry_msgs.msg.PoseStamped()
    table_pose.header.frame_id = "world"
    table_pose.pose.position.x = .25
    table_pose.pose.position.z = -.025
    table_pose.pose.orientation.w = 1.0
    scene.add_box("Table", table_pose, size=(1.22, .62, 0.05))

def reset(cleared, box_position):
    scene = moveit_commander.PlanningSceneInterface()
    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)

    while not rospy.is_shutdown():
        if cleared:
            print("Spawning realsense box")
            box_pose = geometry_msgs.msg.PoseStamped()
            box_pose.header.frame_id = "world"
            box_pose.pose.position.x = box_position[0]
            box_pose.pose.position.y = box_position[1]
            box_pose.pose.position.z = box_position[2]
            scene.add_box("RealSense_box", box_pose, size=(0.14, 0.09, 0.05))
            break
        else:
            continue
    
    print("Going home")

    move_group.set_named_target('Home')
    go = move_group.go(wait="true")
    move_group.stop()

    print("Did I go home?")

def Step(target):
    scene = moveit_commander.PlanningSceneInterface()
    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)

    print("Spawning target object")
    box_pose = geometry_msgs.msg.PoseStamped()
    box_pose.header.frame_id = "world"
    box_pose.pose.position.x = target[0]
    box_pose.pose.position.y = target[1]
    box_pose.pose.position.z = target[2]
    scene.add_box("Target_Object", box_pose, size=(0.025, 0.025, 0.025))

def follow(waypoints,target_position):
    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)

    group_name = "interbotix_gripper"
    gripper_group = moveit_commander.MoveGroupCommander(group_name)

    for points in waypoints:
        print("Going to waypoint",points)
        
        pose = geometry_msgs.msg.Pose()
        pose.position.x = points[0]
        pose.position.y = points[1]
        pose.position.z = points[2]
        pose.orientation.x = points[3]
        pose.orientation.y = points[4]
        pose.orientation.z = points[5]
        pose.orientation.w = points[6]

        go = move_group.go(pose, wait="true")
        move_group.stop()

        print("Did I do it?")

    print("Opening grippers")

    gripper_group.set_named_target('Open')
    go = gripper_group.go(wait="true")
    gripper_group.stop()

    print("Going to target",target_position)
    
    pose = geometry_msgs.msg.Pose()
    pose.position.x = target_position[0]
    pose.position.y = target_position[1]
    pose.position.z = target_position[2]
    pose.orientation.x = target_position[3]
    pose.orientation.y = target_position[4]
    pose.orientation.z = target_position[5]
    pose.orientation.w = target_position[6]

    go = move_group.go(pose, wait="true")
    move_group.stop()

    print("Are we there yet?")

    print("Closing grippers")

    gripper_group.set_named_target('Closed')
    go = gripper_group.go(wait="true")
    gripper_group.stop()

    print("Going home")

    move_group.set_named_target('Home')
    go = move_group.go(wait="true")
    move_group.stop()

    print("Did I go home?")

    print("Opening grippers")

    gripper_group.set_named_target('Open')
    go = gripper_group.go(wait="true")
    gripper_group.stop()

if __name__ == '__main__':
    rospy.init_node('mover') 
    main()
    # rospy.service('step',step,Step)

    cleared = rospy.get_param("/cleared")
    box_position = rospy.get_param("/box_position")
    waypoints = rospy.get_param("/waypoints")
    target = rospy.get_param("/target")
    target_position = rospy.get_param("/target_position")

    # reset(cleared,box_position)
    rospy.service('reset',restart,reset)
    Step(target)
    follow(waypoints,target_position)
    rospy.spin()