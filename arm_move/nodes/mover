#!/usr/bin/env python

from re import T
import sys
from moveit_commander import move_group
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from moveit_msgs.msg import MoveItErrorCodes
from arm_move.srv import restart, step, restartResponse
from std_srvs.srv import Empty, EmptyResponse

class main:
    
    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv)
        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot_name = "interbotix_arm"
        self.robot_group = moveit_commander.MoveGroupCommander(self.robot_name)
        self.gripper_name = "interbotix_gripper"
        self.gripper_group = moveit_commander.MoveGroupCommander(self.gripper_name)
        self.scene = moveit_commander.PlanningSceneInterface()

        rospy.sleep(2)
        
        print("And for my next trick, I will make a table")
        table_pose = geometry_msgs.msg.PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = .25
        table_pose.pose.position.z = -.025
        table_pose.pose.orientation.w = 1.0
        self.scene.add_box("Table", table_pose, size=(1.22, .62, 0.05))
        print("ta da")

    def reset(self, restart):

        clear = restart.clear_waypoints
        
        if clear:
            self.waypoints = []
            print("Clearing waypoints")
            rospy.set_param("/waypoints",self.waypoints)
        else:
            self.waypoints = rospy.get_param("/waypoints")
        
        print(rospy.get_param("/waypoints"))
        print("Starting with waypoints:",self.waypoints)

        print("Going home")

        self.robot_group.set_named_target('Home')
        go = self.robot_group.go(wait="true")
        self.robot_group.stop()

        print("Did I go home?")

        print("Opening grippers")

        self.gripper_group.set_named_target('Open')
        go = self.gripper_group.go(wait="true")
        self.gripper_group.stop()

        print("Spawning realsense box")
        box_pose = geometry_msgs.msg.PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.position.x = restart.box_x
        box_pose.pose.position.y = restart.box_y
        box_pose.pose.position.z = restart.box_z
        self.scene.add_box("RealSense_box", box_pose, size=(0.14, 0.09, 0.05))

        return []

    def step(self,target):

        gripper = target.gripper
        target = [target.x,target.y,target.z,target.rx,target.ry,target.rz,target.rw]        

        print("Going to waypoint",target)
        
        pose = geometry_msgs.msg.Pose()
        pose.position.x = target[0]
        pose.position.y = target[1]
        pose.position.z = target[2]
        pose.orientation.x = target[3]
        pose.orientation.y = target[4]
        pose.orientation.z = target[5]
        pose.orientation.w = target[6]

        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Did I do it?")

        (success_flag, trajectory_message, planning_time, error_code) = self.robot_group.plan()
        print(error_code.val)
        if error_code.val == 1:
            self.waypoints.append(target)
            print(self.waypoints)
            if gripper==1:
                print("Closing grippers")
                self.gripper_group.set_named_target('Closed')
                go = self.gripper_group.go(wait="true")
                self.gripper_group.stop()
                self.waypoints.append([1])
            elif gripper==0:
                print("Opening grippers")
                self.gripper_group.set_named_target('Open')
                go = self.gripper_group.go(wait="true")
                self.gripper_group.stop()
                self.waypoints.append([0])
                
            rospy.set_param("/waypoints",self.waypoints)

        return error_code.val

    def follow(self,Empty):
        self.waypoints = rospy.get_param("/waypoints")
        
        for points in self.waypoints:
            if len(points) == 1:
                if points[0] == 1:
                    print("Closing grippers")
                    self.gripper_group.set_named_target('Closed')
                    go = self.gripper_group.go(wait="true")
                    self.gripper_group.stop()
                elif points[0] == 0:
                    print("Opening grippers")
                    self.gripper_group.set_named_target('Open')
                    go = self.gripper_group.go(wait="true")
                    self.gripper_group.stop()
            if len(points) == 7:
                print("Going to waypoint",points)
                
                pose = geometry_msgs.msg.Pose()
                pose.position.x = points[0]
                pose.position.y = points[1]
                pose.position.z = points[2]
                pose.orientation.x = points[3]
                pose.orientation.y = points[4]
                pose.orientation.z = points[5]
                pose.orientation.w = points[6]

                go = self.robot_group.go(pose, wait="true")
                self.robot_group.stop()

                print("Did I do it?")

        return []

if __name__ == '__main__':
    rospy.init_node('mover')
    main = main()
    rospy.Service('restart',restart,main.reset) 
    rospy.Service('step',step,main.step)
    rospy.Service('follow',Empty,main.follow)
    rospy.spin()



##Spawn Target Object##
# print("Spawning target object")
# box_pose = geometry_msgs.msg.PoseStamped()
# box_pose.header.frame_id = "world"
# box_pose.pose.position.x = target[0]
# box_pose.pose.position.y = target[1]
# box_pose.pose.position.z = target[2]
# self.scene.add_box("Target_Object", box_pose, size=(0.025, 0.025, 0.025))