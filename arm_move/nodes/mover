#!/usr/bin/env python

import sys
from moveit_commander import move_group
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
# from moveit_msgs import MoveItErrorCodes
# from arm_move.srv import restart, step

def main():
    scene = moveit_commander.PlanningSceneInterface()

    moveit_commander.roscpp_initialize(sys.argv)

    rospy.sleep(2)

    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)
    
    display_trajectory_publisher = rospy.Publisher("/move_group/display_planned_path", moveit_msgs.msg.DisplayTrajectory,queue_size=20)

    table_pose = geometry_msgs.msg.PoseStamped()
    table_pose.header.frame_id = "world"
    table_pose.pose.position.x = .25
    table_pose.pose.position.z = -.025
    table_pose.pose.orientation.w = 1.0
    scene.add_box("Table", table_pose, size=(1.22, .62, 0.05))

def reset(waypoints):
    scene = moveit_commander.PlanningSceneInterface()
    group_name = "interbotix_arm"
    move_group = moveit_commander.MoveGroupCommander(group_name)

    while not rospy.is_shutdown():
        if waypoints:
            print("Box")
            box_pose = geometry_msgs.msg.PoseStamped()
            box_pose.header.frame_id = "world"
            box_pose.pose.position.x = .25
            box_pose.pose.position.z = .025
            box_pose.pose.orientation.w = 1.0
            # box_pose.pose.position.x = cleared.box_x
            # box_pose.pose.position.y = cleared.box_y
            # box_pose.pose.position.z = cleared.box_z 
            scene.add_box("RealSense_box", box_pose, size=(0.14, 0.09, 0.05))
            break
        else:
            continue
    
    print("attempting to make a move")

    # move_group.set_named_target('Home')
    # go = move_group.go(wait="true")
    # move_group.stop()

    home_pose = geometry_msgs.msg.Pose()
    home_pose.position.x = .24858
    home_pose.position.y = 0
    home_pose.position.z = .19308
    home_pose.orientation.x = 0
    home_pose.orientation.y = 0
    home_pose.orientation.z = 0
    home_pose.orientation.w = 1
    # move_group.set_pose_target(home_pose)

    go = move_group.go(home_pose, wait="true")
    move_group.stop()

    pose = geometry_msgs.msg.Pose()
    pose.position.x = .12365
    pose.position.y = .25237
    pose.position.z = .24514
    pose.orientation.x = .12963
    pose.orientation.y = -.20787
    pose.orientation.z = .51303
    pose.orientation.w = .82267

    go = move_group.go(pose, wait="true")
    move_group.stop()

    print("Did I move?")

def Step(target):
    x = target.target_x
    y = target.target_y
    z = target.target_z
    rx = target.target_rx
    ry = target.target_ry
    rz = target.target.rz

    return MoveItErrorCodes

if __name__ == '__main__':
    rospy.init_node('mover') 
    main()
    # rospy.service('step',step,Step)
    #rospy.service('reset',restart,reset)
    waypoints = rospy.get_param("/waypoints")
    reset(waypoints)
    rospy.spin()