#!/usr/bin/env python

## MOVER NODE ##
'''
The mover node connects to the interbotix arm and adds a table to the planning scene. It sets up the restart, step, and follow services
to be called by the user in the command line. 

Custom Services:
    Name: px100/restart Type: arm_move/restart ~ Takes an argument to either set waypoints to an empty list or use the existing 
        parameter values. Moves the arm to its home position, and spawns a box at the coordinates specified in the argument.

    Name: px100/step Type: arm_move/step ~ Attempts to plan a path for the arm's end effector to move to the position given in the
        argument. If the path is successful, the robot moves to the position and the waypoints is added to the parameter. Returns 
        the MoveIt error code value.
    
    Name: px100/follow Type: std_srvs/Empty ~ Loads the waypoints from the parameter server and follows the path set with the step service.

Parameters: 
    Name: /waypoints ~ Waypoint coordinates and gripper commands
    Name: /cycle
'''

import sys
import rospy
import moveit_commander
import geometry_msgs.msg
from arm_move.srv import restart, step, follow

class main:
    
    def __init__(self):
        '''
        Initialize the python API for the moveit_commander and creates the planning scene. Set up move groups for the whole robot 
        and its end effector, and spawns a collision object to represent the table in the planning scene. 
        '''
        moveit_commander.roscpp_initialize(sys.argv)

        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot_name = "interbotix_arm"
        self.robot_group = moveit_commander.MoveGroupCommander(self.robot_name)
        self.gripper_name = "interbotix_gripper"
        self.gripper_group = moveit_commander.MoveGroupCommander(self.gripper_name)
        
        rospy.Service('restart',restart,self.reset) 
        rospy.Service('step',step,self.step)
        rospy.Service('follow',follow,self.follow)
        
        self.scene = moveit_commander.PlanningSceneInterface()

        rospy.sleep(2)
        
        print("And for my next trick, I will make a table")
        table_pose = geometry_msgs.msg.PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.position.x = .25
        table_pose.pose.position.z = -.025
        table_pose.pose.orientation.w = 1.0
        self.scene.add_box("Table", table_pose, size=(1.22, .62, 0.05))
        print("ta da")

    def reset(self, restart):
        '''
        If the service call sets clear_waypoints to true, set waypoints to an empty list and update the paramter server. Otherwise,
        Pull waypoints from the parameter server. Set the robot to the home position and open the grippers. Spawn the collision
        object representing the realsense box using the coordinates from the service call. Empty return. 
        '''

        clear = restart.clear_waypoints
        
        if clear:
            self.waypoints = []
            print("Clearing waypoints")
            rospy.set_param("/waypoints",self.waypoints)
        else:
            self.waypoints = rospy.get_param("/waypoints")
        
        print("Starting with waypoints:",rospy.get_param("/waypoints"))

        print("Going home")

        self.robot_group.set_named_target('Home')
        go = self.robot_group.go(wait="true")
        self.robot_group.stop()

        print("Did I go home?")

        print("Opening grippers")

        self.gripper_group.set_named_target('Open')
        go = self.gripper_group.go(wait="true")
        self.gripper_group.stop()

        print("Spawning realsense box")
        box_pose = geometry_msgs.msg.PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.position.x = restart.box_x
        box_pose.pose.position.y = restart.box_y
        box_pose.pose.position.z = restart.box_z
        self.scene.add_box("RealSense_box", box_pose, size=(0.14, 0.09, 0.05))

        return []

    def step(self,target):
        '''
        Takes the service call arguments to send a target pose to the robot. Pulls the resulting error code. If the execution
        was successful, adds the 7-element list of the position and orientation to the waypoints lists and updates the parameter. 
        Checks the service call argument and opens the grippers if 0 was given, closes the grippers if 1 was given, or sends no
        gripper commands if any other value was set. Appends the gripper command, if applicable, to the waypoints list and
        updates the parameter. Returns the error code.
        '''
        gripper = target.gripper
        target = [target.x,target.y,target.z,target.rx,target.ry,target.rz,target.rw]        

        print("Going to waypoint",target)
        
        pose = geometry_msgs.msg.Pose()
        pose.position.x = target[0]
        pose.position.y = target[1]
        pose.position.z = target[2]
        pose.orientation.x = target[3]
        pose.orientation.y = target[4]
        pose.orientation.z = target[5]
        pose.orientation.w = target[6]

        self.robot_group.go(pose, wait="true")
        self.robot_group.stop()

        print("Did I do it?")

        (success_flag, trajectory_message, planning_time, error_code) = self.robot_group.plan()
        print(error_code.val)
        if error_code.val == 1:
            self.waypoints.append(target)
            print(self.waypoints)
            if gripper==1:
                print("Closing grippers")
                self.gripper_group.set_named_target('Closed')
                go = self.gripper_group.go(wait="true")
                self.gripper_group.stop()
                self.waypoints.append([1])
            elif gripper==0:
                print("Opening grippers")
                self.gripper_group.set_named_target('Open')
                go = self.gripper_group.go(wait="true")
                self.gripper_group.stop()
                self.waypoints.append([0])
                
            rospy.set_param("/waypoints",self.waypoints)

        return error_code.val

    def follow(self,cycle):
        '''
        Essentially plays back all the step service calls. Pulls the cycle argument and sets a new private parameter to the initial value. 
        Reads waypoints from the parameter server, and iterates through each element. After each loop, checks the private parameter. If cycle
        is still set to true, the cycle continues. Otherwise, the service call ends. Each element is a list with either 1 number, corresponding 
        to a gripper command, or 7 numbers, corresponding to a target position and either the gripper move group or robot group recieves a 
        command corresponding to the list values.
        '''
        self.waypoints = rospy.get_param("/waypoints")
        
        self.cycle = cycle.cycle
        rospy.set_param('/cycle',self.cycle)
        
        self.keep_going = rospy.get_param('/cycle')        

        while self.keep_going:
            for points in self.waypoints:
                if len(points) == 1:
                    if points[0] == 1:
                        print("Closing grippers")
                        self.gripper_group.set_named_target('Closed')
                        go = self.gripper_group.go(wait="true")
                        self.gripper_group.stop()
                    elif points[0] == 0:
                        print("Opening grippers")
                        self.gripper_group.set_named_target('Open')
                        go = self.gripper_group.go(wait="true")
                        self.gripper_group.stop()
                if len(points) == 7:
                    print("Going to waypoint",points)
                    
                    pose = geometry_msgs.msg.Pose()
                    pose.position.x = points[0]
                    pose.position.y = points[1]
                    pose.position.z = points[2]
                    pose.orientation.x = points[3]
                    pose.orientation.y = points[4]
                    pose.orientation.z = points[5]
                    pose.orientation.w = points[6]

                    go = self.robot_group.go(pose, wait="true")
                    self.robot_group.stop() 
                
            self.keep_going = rospy.get_param('/cycle')         

        return []

if __name__ == '__main__':
    rospy.init_node('mover')
    main = main()
    rospy.spin()